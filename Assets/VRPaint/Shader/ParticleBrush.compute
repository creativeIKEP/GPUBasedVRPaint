#pragma kernel CSMain  // カーネル関数を指定

#define PARTICLE_NUM 327680 //ParticleBrush.csの定数と合わせる
#define NODE_NUM 4000 //TrailBrush.csの定数と合わせる

#define NUM_THREAD_X (PARTICLE_NUM / NODE_NUM)
#define NUM_THREAD_Y 1 // スレッド数 Y成分
#define NUM_THREAD_Z 1 // スレッド数 Z成分

#define PI 3.14159265

#include "GPUTrailsUtil.cginc"


// パーティクルデータの構造体
struct ParticleData
{
	float3 velocity; // 速度
	float3 position; // 位置
	float3 acceleration;
	float lifeTime;
	float timeFromRePositioning;
	int generatedNodeId;
};

// 定数バッファ
cbuffer CB
{
	float _TimeStep;
	float _Time;
}

// 読み込み書き込みが可能なパーティクルデータを格納するバッファ
RWStructuredBuffer<ParticleData> _ParticleBuffer;
int _particleNum;

StructuredBuffer<Trail> _TrailBuffer;

StructuredBuffer<Node> _NodeBuffer;
float _nodeUpdateMin;


// 乱数(0.0~1.0)を返す関数
float rand(float2 co)
{
    return frac(sin(dot(co.xy, float2(12.9898,78.233))) * 43758.5453);
}

// 半径1の球体の内部のランダムな点
float3 randomInsideUnitSphere (float co)
{  
	float phi = 2 * PI * rand(co);
	float th  = acos(1.0 - 2.0 * rand(co + float2(0.0, 0.1)));
	float r   = pow(rand(co + float2(0.0, 0.2)), 0.333333333);
  
	float x = r* sin(th)* cos(phi);
	float y = r * sin(th) * sin(phi);
	float z = r* cos(th);
  
	return float3(x, y, z);
}


int NextNodeId(int nodeId) {
	int nextNodeId = nodeId + 1;
	if (!IsValid(_NodeBuffer[nextNodeId]) || _NodeBuffer[nextNodeId].trailId != _NodeBuffer[nodeId].trailId) {
		nextNodeId = nodeId;
	}
	return nextNodeId;
}

float3 WidthExpandParticlePos(int particleId, float3 pos, float lineWidth) {
	return pos + lineWidth * 0.5 * randomInsideUnitSphere(float(particleId));
}


// ------------------------------------------------------------------
// カーネル関数
// ------------------------------------------------------------------
// スレッド数を設定
[numthreads(NUM_THREAD_X,NUM_THREAD_Y,NUM_THREAD_Z)]
void CSMain ( uint3 Gid  : SV_GroupID,
              uint3 GTid : SV_GroupThreadID,
              uint3 DTid : SV_DispatchThreadID,
			  uint  GI   : SV_GroupIndex )
{
	int particleId = DTid.x;
	int fromNodeId = _ParticleBuffer[particleId].generatedNodeId;
	int toNodeId = NextNodeId(fromNodeId);
	float3 velocity = _ParticleBuffer[particleId].velocity;
	float3 position = _ParticleBuffer[particleId].position;
	float3 prePosition = position;
	float time = _ParticleBuffer[particleId].timeFromRePositioning;
	
	time += _TimeStep;

	position += velocity * _TrailBuffer[_NodeBuffer[fromNodeId].trailId].particleSpeed * _TimeStep;

	float fromNodeToDistance = length(position - _NodeBuffer[fromNodeId].position);
	float nodeBetweenDistance = length(_NodeBuffer[toNodeId].position - _NodeBuffer[fromNodeId].position);
	bool isArriveToNode = fromNodeToDistance > nodeBetweenDistance;

	float len = length(position - _NodeBuffer[toNodeId].position);
	if (isArriveToNode && len > _TrailBuffer[_NodeBuffer[fromNodeId].trailId].width) {
		int step = int(len / _nodeUpdateMin);
		for (int i = 0; i < step; i++) {
			fromNodeId = NextNodeId(fromNodeId);
		}
		toNodeId = NextNodeId(fromNodeId);

		position = _NodeBuffer[fromNodeId].position;
		position = WidthExpandParticlePos(particleId, position, _TrailBuffer[_NodeBuffer[fromNodeId].trailId].width);
		velocity = normalize(_NodeBuffer[toNodeId].position - _NodeBuffer[fromNodeId].position);
		//velocity *= _TrailBuffer[_NodeBuffer[fromNodeId].trailId].particleSpeed;
	}
	

	if (time >= _ParticleBuffer[particleId].lifeTime)
	{
		time = 0;
		fromNodeId = Gid.x;
		toNodeId = NextNodeId(fromNodeId);
		position = WidthExpandParticlePos(particleId, _NodeBuffer[fromNodeId].position, _TrailBuffer[_NodeBuffer[fromNodeId].trailId].width);
		velocity = normalize(_NodeBuffer[toNodeId].position - _NodeBuffer[fromNodeId].position);
	}
	
	_ParticleBuffer[particleId].velocity = velocity;
	_ParticleBuffer[particleId].position = position;
	_ParticleBuffer[particleId].timeFromRePositioning = time;
	_ParticleBuffer[particleId].generatedNodeId = fromNodeId;
}